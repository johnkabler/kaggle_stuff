for (row in train_iris) {
print row[1]
}
for (row in train_iris) {
print row[1] }
train_iris[,1][1]
for (col in train_iris[,1]) {print(col)}
for (col in train_iris[1,]) {print(col)}
head(train_iris)
train_iris[1,]**2
train_iris**2
train_iris['Distance'] <- NA
train_iris$Distance <-
apply(test_iris, 1, function(test_row) {
return(min((sqrt(sum((train_iris - test_row)**2))))
} )
}
train_iris['Distance'] <- NA
train_iris$Distance <-
apply(test_iris, 1, function(test_row) {
return(min((sqrt(sum((train_iris - test_row)**2))))
} )
train_iris['Distance'] <- NA
train_iris$Distance <-
apply(test_iris, 1, function(test_row) {
return(min((sqrt(sum((train_iris - test_row)**2))));
} )
train_iris['Distance'] <- NA
train_iris$Distance <-
apply(test_iris, 1, function(test_row) {
return(min((sqrt(sum((train_iris - test_row)**2)))));})
head(train_iris)
train_iris['Distance'] <- NA
train_iris$Distance <-
apply(test_iris, 1, function(test_row) {
return(min((sqrt(sum((train_iris[,1:4] - test_row)**2)))));})
head(train_iris)
train_iris$Distance <- sum(train_iris[,1:4])
head(train_iris)
train_iris$
;
train_iris[,1,4]
train_iris[,1:4]
train_iris['Distance'] <- NA
train_iris$Distance <-
apply(test_iris, 1, function(test_row) {
return(min((sqrt(sum((train_iris[row,] - test_row)**2)))));
})
train_iris['Distance'] <- NA
train_iris$Distance <-
apply(test_iris, 1, function(test_row) {
return(min((sqrt(sum((train_iris[row,] - test_row)**2)))));
})
train_iris['Distance'] <- NA
train_iris$Distance <-
apply(test_iris, 1, function(test_row) {
return(min((sqrt(sum((train_iris[row] - test_row)**2)))));
})
row(train_iris[1,])
train_iris[1,]
train_iris['Distance'] <- NA
train_iris$Distance <-
apply(test_iris, 1, function(test_row) {
row_num <- row(train_iris$Distance)
return(min((sqrt(sum((train_iris[row_num,1:4] - test_row)**2)))));
})
train_iris['Distance'] <- NA
train_iris$Distance <-
apply(test_iris, 1, function(test_row) {
row_num <- row(train_iris)
return(min((sqrt(sum((train_iris[row_num,1:4] - test_row)**2)))));
})
head(train_iris)
train_iris['Distance'] <- NA
train_iris$Distance <-
apply(test_iris, 1, function(test_row) {
return(min((sqrt(sum((train_iris[row,1:4] - test_row)**2)))));
})
row(train_iris)
rownames(train_iris[1,1:4])
train_iris['Distance'] <- NA
train_iris$Distance <-
apply(test_iris, 1, function(test_row) {
return(rownames(train_iris$Distance))
#return(min((sqrt(sum((train_iris[row,1:4] - test_row)**2)))));
})
head(train_iris)
rownames(train_iris)
train_iris['Distance'] <- as.numeric(rownames(train_iris))
train_iris$Distance <-
apply(test_iris, 1, function(test_row) {
return(min((sqrt(sum((train_iris[train_iris$Distance,1:4] - test_row)**2)))));
})
head(train_iris)
train_iris['Distance'] <- NA
train_iris$Distance <- apply(train_iris, 1, function(train_row) {
apply(test_iris, 1, function(test_row) {
return(min((sqrt(sum((train_row - test_row)**2)))));
})
})
head(train_iris)
train_iris['Distance'] <- NA
train_iris$Distance <- apply(train_iris, 1, function(train_row) {
apply(test_iris, 1, function(test_row) {
return(min((sqrt(sum((train_row[1:4] - test_row)**2)))));
})
})
head(train_iris)
min(train_iris[,1])
sum(train_iris[1,1:4])
train_iris['Distance'] <- NA
#train_iris$Distance <-
apply(train_iris, 1, function(train_row) {
apply(test_iris, 1, function(test_row) {
return(min((sqrt(sum((train_row[1:4] - test_row)**2)))));
})
})
head(test_iris)
train_iris['Distance'] <- NA
#train_iris$Distance <-
apply(train_iris, 1, function(train_row) {
apply(test_iris, 1, function(test_row) {
return(min(sqrt(sum((train_row[1:4] - test_row)**2))));
}))
})
train_iris['Distance'] <- NA
#train_iris$Distance <-
apply(train_iris, 1, function(train_row) {
apply(test_iris, 1, function(test_row) {
return(min(sqrt(sum((train_row[1:4] - test_row)**2))));
})
})
sum(train_iris[1,1:4], test_iris[1,])
train_iris[1,1:4] - test_iris[1,]
(train_iris[1,1:4] - test_iris[1,])**2
sum((train_iris[1,1:4] - test_iris[1,])**2)
sqrt(sum((train_iris[1,1:4] - test_iris[1,])**2))
min(sqrt(sum((train_iris[1,1:4] - test_iris[1,])**2)))
train_iris['Distance'] <- NA
#train_iris$Distance <-
apply(train_iris, 1, function(train_row) {
apply(test_iris, 1, function(test_row) {
result <- (sqrt(sum((train_row[1:4] - test_row)**2)));
return(result)
})
return(min(result))
})
train_iris['Distance'] <- NA
#train_iris$Distance <-
apply(train_iris, 1, function(train_row) {
return(min(apply(test_iris, 1, function(test_row) {
return(sqrt(sum((train_row[1:4] - test_row)**2)));
})))
})
train_iris['Distance'] <- NA
#train_iris$Distance <-
train_iris$Distance <- apply(train_iris, 1, function(train_row) {
return(min(apply(test_iris, 1, function(test_row) {
return(sqrt(sum((train_row[1:4] - test_row)**2)));
})))
})
head(train_iris)
tst_vals <- iris[1, 1:4]
head(tst_vals)
knn_function <- function(tst_iris, trn_iris) {
apply(tst_iris, 1, function(tst_row) {
return(min(apply(trn_iris, 1, function(trn_row) {
return(sqrt(sum((tst_row[1:4] - trn_row[1:4])**2)));
})))
})
}
knn_function(tst_vals, iris)
iris[1,1:4]
knn_function(tst_vals, iris)
knn_function <- function(tst_iris, trn_iris) {
apply(tst_iris, 1, function(tst_row) {
return(min(apply(trn_iris, 1, function(trn_row) {
return(sqrt(sum((tst_row[1:4] - trn_row[1:4])**2)));
})))
})
}
knn_function(tst_vals, iris)
tst_vals[1:4]
knn_function(tst_vals, train_iris)
knn_function(tst_vals, test_iris)
head(train_iris)
apply(train_iris, 1, function(m,n) return(m - n), .5)
euc_distance <- function(a, b) {
return sqrt(sum((a - b)^2))
}
euc_distance <- function(a, b) {
return sqrt(sum((a - b)^2));
}
euc_distance <- function(a, b)
return sqrt(sum((a - b)^2));
euc_distance <- function(a, b)
return sqrt(sum((a - b)^2))
euc_distance <- function(a, b){
return sqrt(sum((a - b)^2))}
euc_distance <- function(a, b){return sqrt(sum((a - b)^2))}
euc_distance <- function(a, b){return sqrt(sum((a - b)**2))}
euc_distance <- function(a, b){sqrt(sum((a - b)**2))}
euc_distance(c(3, 3), c(1,1))
head(test_iris)
test_labels <- seq_along(test_iris)
test_labels
test_labels <- seq_len(test_iris)
test_labels
seq_len(test_iris)
seq_len(nrow(test_iris))
test_labels <- seq_len(nrow(test_iris))
test_labels
test_labels[1]
test_labels <- as.character(seq_len(nrow(test_iris)))
test_labels
train_iris$Distance
head(train_iris)
head(test_iris)
head(iris)
row(iris[3,1])
row(iris[3,1:4])
row(iris[3,1:4])[1,1]
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b) {
c(euc_distance(a,b), row(b)[1,1]}, test_iris[row_num, ])
}
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b)
c(euc_distance(a,b), row(b)[1,1], test_iris[row_num, ])
}
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b) {
c(euc_distance(a,b), row(b)[1,1] } , test_iris[row_num, ])
}
for (row_num in nrow(test_iris)) {dist_list <- apply(train_iris, 1, function(a,b) {c(euc_distance(a,b), row(b)[1,1] } , test_iris[row_num, ])}
for (row_num in nrow(test_iris)) {dist_list <- apply(train_iris, 1, function(a,b) {c(euc_distance(a,b), row(b)[1,1] } , test_iris[row_num, ])}
for (row_num in nrow(test_iris)) {dist_list <- apply(train_iris, 1, function(a,b) {c(euc_distance(a,b), row(b)[1,1]) } , test_iris[row_num, ])}
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b) {
return c(euc_distance(a,b), row(b)[1,1]) } , test_iris[row_num, ])}
dist_list
head(dist_list)
str(dist_list)
dist_list
dist_list[1,1:2]
dist_list[1,]
order(dist_list)
?order
dist_list[1,76]
dist_list[1,75]
dist_list[1,]
library(plyr)
typeof(dist_list)
class(dist_list)
dist_list[1,1,1]
dist_list[1,1][1]
dist_list[1,1][1:2]
dist_list[1,1]
class(dist_list[1,1])
data.frame(dist_list)
data.frame(dist_list)[1,]
head(data.frame(dist_list)[1,])
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b) {
euc_distance(a,b) } , test_iris[row_num, ])}
class(dist_list)
dist_list
min(dist_list)
order(dist_list)
train_iris[order(dist_list)[1:5,]]
train_iris[order(dist_list)[1:5]]
train_iris[order(dist_list)]
dist_list
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b) {
euc_distance(a,b) } , test_iris[row_num, ])}
dist_list
iris[min(dist_list)]
iris
iris$
;
iris[1, 0]
row(iris[1, 4])
head(test_iris)
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b,c) {
euc_distance(a,b), print(c) } , test_iris[row_num, ], row(a)[1])}
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b,c) {
euc_distance(a,b), print(c) } , test_iris[row_num, ]}
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b,c) {
euc_distance(a,b); print(c) } , test_iris[row_num, ], row(a)[1]}
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b,c) {
euc_distance(a,b); print(c); } , test_iris[row_num, ], row(a)[1]}
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b) {
euc_distance(a,b)} , test_iris[row_num, ]}
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b) {
euc_distance(a,b)} , test_iris[row_num,]}
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b,c) {
euc_distance(a,b); print(c) } , test_iris[row_num,], row(a)[1]
)}
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b,c) {
euc_distance(a,b); print(c) } , test_iris[row_num,], row(train_iris)[1]
)}
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b,c) {
euc_distance(a,b); print(c) } , test_iris[row_num,], row(train_iris)
)}
dist_list[1]
dist_list
for (row_num in nrow(test_iris)) {
dist_list <- apply(train_iris, 1, function(a,b,c) {
euc_distance(a,b); } , test_iris[row_num,], row(train_iris)
)}
dist_list
match(min(dist_list), dist_list)
which.min(dist_list)
which(min(dist_list))
iris$Species[:3]
iris$Species[1:3]
iris$Species[1:30]
iris$Species[1:30][8]
iris$Species[8]
train_data
train_iris
rm(train_iris$Distance)
train_iris$Distance <- NULL
train_iris
iris$Species[1:75]
train_labels <- vector(iris$Species[1:75])
train_labels <- vector(c(iris$Species[1:75]))
train_labels <- c(iris$Species[1:75])
train_labels <- iris$Species[1:75]
train_labels <- as.character(iris$Species[1:75])
first_nearest_neighbor <- function(training_data, labels, test_data) {
euc_distance <- function(a, b){
dist <- sqrt(sum((a - b)**2))
}
#currently, knn_function just returns the shortest distance computed.
#Need to modify it to return the actual row from which the shortest distance
#is computed.
test_labels <- as.character(seq_len(nrow(test_data)))
for (test_row in nrow(test_data)) {
dist_list <- apply(training_data, 1, function(a,b) {
euc_distance(a,b);
} , test_data[test_row,]
)
nn.index <- match(min(dist_list), dist_list)
test_labels[test_row] <- labels[nn.index]
#Uncomment above line to turn in function after test.
#test_labels[test_row] <- iris$Species[nn.index]
}
return(test_labels)
}
first_nearest_neighbor(train_iris, train_labels, test_iris)
test_iris
train_iris
test_iris
first_nearest_neighbor(iris[1:20,1:4], train_labels, iris[1:20, 1:4])
dist_list
class(dist_list)
first_nearest_neighbor <- function(training_data, labels, test_data) {
euc_distance <- function(a, b){
dist <- sqrt(sum((a - b)**2))
}
#currently, knn_function just returns the shortest distance computed.
#Need to modify it to return the actual row from which the shortest distance
#is computed.
test_labels <- as.character(seq_len(nrow(test_data)))
for (test_row in 1:nrow(test_data)) {
dist_list <- apply(training_data, 1, function(a,b) {
euc_distance(a,b);
} , test_data[test_row,]
)
nn.index <- match(min(dist_list), dist_list)
test_labels[test_row] <- labels[nn.index]
#Uncomment above line to turn in function after test.
#test_labels[test_row] <- iris$Species[nn.index]
}
return(test_labels)
}
first_nearest_neighbor(iris[1:20,1:4], train_labels, iris[1:20, 1:4])
iris[1:20]
iris[1:20,]
sampled <- as.logical(sample(c(0,1), 150))
sampled <- as.logical(sample(c(0,1), 150, replace=TRUE))
head(sample)
head(sampled)
train.set <- iris[sampled, ]
head(train.set)
test.set <- iris[!sampled, 1:4]
train.labels <- iris[sampled, 5]
train.labels <- c(iris[sampled, 5])
train.labels <- as.character(iris[sampled, 5])
first_nearest_neighbor(train.set, train.labels, test.set)
train.set <- iris[sampled, 1:4]
first_nearest_neighbor(train.set, train.labels, test.set)
~
;
fnn.result <- first_nearest_neighbor(train.set, train.labels, test.set)
type(fnn.result)
typeof(fnn.result)
class(fnn.result)
fnn.result[1]
levels(fnn.result)
levels(train.labels)
factor(fnn.result)
factor(train.labels)
table(factor(fnn.result), iris[!sampled, 5], dnn=c("predicted", "actual"))
cbind(fnn.result, iris[!sampled, 5])
cbind(fnn.result, iris[!sampled])
cbind(fnn.result, iris[!sampled][5])
cbind(fnn.result, as.character(iris[!sampled, 5]))
?names
side.by.side <- cbind(fnn.result, as.character(iris[!sampled, 5]))
head(side.by.side)
names(side.by.side) <- c("predicted", "actual")
side.by.side
side.by.side <- cbind(fnn.result, as.character(iris[!sampled, 5]))
colnames(side.by.side) <- c("predicted", "actual")
head(side.by.side)
side.by.side
side.by.side[,1]
side.by.side[,1] == side.by.side[,2]
side.by.side[!side.by.side[,1] == side.by.side[,2]]
side.by.side[side.by.side[,1] == side.by.side[,2]]
side.by.side
class(side.by.side)
data.frame(side.by.side)
side.by.side <- data.frame(side.by.side)
side.by.side$predicted != side.by.side$actual
side.by.side[side.by.side$predicted != side.by.side$actual]
side.by.side[side.by.side$predicted != side.by.side$actual, 1:2]
getwd()
setwd('/Users/johnkabler/kaggle_stuff/')
titanic.train <- read.csv('train.csv')
View(titanic.train)
View(titanic.train)
titanic.train$sex
titanic.train$Sex
titanic.train$Sex
as.numeric(titanic.train$Sex)
str(titanic.train)
titanic.train$Sex <- as.numeric(titanic.train$Sex)
str(titanic.train)
View(titanic.train)
View(titanic.train)
train.gac <- titanic.train['Sex', 'Pclass', 'Age']
train.gac <- titanic.train[c('Sex', 'Pclass', 'Age')]
View(train.gac)
train.gac.labels <- titanic.train$Survived
getwd()
titanic.test <- read.csv('test.csv')
View(titanic.test)
titanic.test$Sex <- as.numeric(titanic.test$Sex)
View(titanic.test)
test.gac <- titanic.test[c('Sex', 'Pclass', 'Age')]
View(test.gac)
knn()
library(knn)
library(class)
knn(train.gac, test.gac, train.gac.labels)
train.gac$Age == NA
train.gac$Age
is.na(train.gac$Age)
!is.na(train.gac$Age)
train.gac[-is.na(train.gac$Age)]
train.gac[!is.na(train.gac$Age)]
train.gac[, , NA]
train.gac[is.na(train.gac$Age)]
train.gac[is.na(train.gac$Age),]
train.gac[-is.na(train.gac$Age),]
train.gac[!is.na(train.gac$Age),]
train.gac.clean <- train.gac[!is.na(train.gac$Age),]
test.gac.clean <- test.gac[!is.na(test.gac$Age),]
View(train.gac.clean)
train.gac.clean <- train.gac.clean(,2:4)
train.gac.clean <- train.gac.clean[,2:4]
train.gac.clean
head(train.gac.clean)
head(test.gac.clean)
rm(test.gac.clean)
rm(train.gac.clean)
train.gac.clean <- train.gac[!is.na(train.gac$Age),]
is.na(test.gac$Age)
test.gac[is.na(test.gac$Age), 3]
test.gac[is.na(test.gac$Age), 3] <- 29
test.gac[is.na(test.gac$Age), 3]
View(test.gac)
knn(train.gac.clean, test.gac, train.gac.labels)
cbind(train.gac, train.gac.labels)
train.gac <- titanic.train[, c('Sex', 'Pclass', 'Age')]
train.gac[is.na(train.gac$Age), 3] <- 29
knn(train.gac, test.gac, train.gac.labels)
nrow(knn(train.gac, test.gac, train.gac.labels))
nrow(test.gac)
test.gac.preds <- knn(train.gac, test.gac, train.gac.labels)
View(test.gac.preds)
cbind(titanic.test, test.gac.preds)
titanic.prediction <- cbind(titanic.test, test.gac.preds)
View(titanic.prediction)
View(titanic.prediction)
View(titanic.train)
View(titanic.train)
write.csv(titanic.prediction, file = "titanic_pred.csv")
savehistory("~/kaggle_stuff/titanic_history_file.Rhistory")
